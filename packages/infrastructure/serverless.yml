service: lunch-picker

plugins:
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: ${self:resources.Resources.WebAssets.Properties.BucketName}
      localDir: ../app-web/build
  env:
    node:
      dev: development
      prod: production
  domain:
    dev: dev.${self:service}.dennisskoko.com
    prod: ${self:service}.dennisskoko.com

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-north-1'}
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: !GetAtt RestaurantTable.Arn
  apiKeys:
    - ${self:service}-${self:provider.stage}-app-web

functions:
  api:
    handler: src/handlers/api.handler
    events:
      - http:
          path: /graphql
          method: ANY
          private: true
          cors: true
    environment:
      NODE_ENV: ${self:custom.env.node.${self:provider.stage}}
      RESTAURANT_TABLE: !Ref RestaurantTable

resources:
  Resources:
    WebAssets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.domain.${self:provider.stage}}
        WebsiteConfiguration:
          IndexDocument: index.html

    WebAssetsPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAssets
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join ['', [!GetAtt WebAssets.Arn, '/*']]
              Principal: '*'

    RestaurantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Name
            AttributeType: S
        KeySchema:
          - AttributeName: Name
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
